// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: keyprovider.proto

package keyprovider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyProviderServiceClient is the client API for KeyProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyProviderServiceClient interface {
	WrapKey(ctx context.Context, in *KeyProviderKeyWrapProtocolInput, opts ...grpc.CallOption) (*KeyProviderKeyWrapProtocolOutput, error)
	UnWrapKey(ctx context.Context, in *KeyProviderKeyWrapProtocolInput, opts ...grpc.CallOption) (*KeyProviderKeyWrapProtocolOutput, error)
	GetReport(ctx context.Context, in *KeyProviderGetReportInput, opts ...grpc.CallOption) (*KeyProviderGetReportOutput, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type keyProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyProviderServiceClient(cc grpc.ClientConnInterface) KeyProviderServiceClient {
	return &keyProviderServiceClient{cc}
}

func (c *keyProviderServiceClient) WrapKey(ctx context.Context, in *KeyProviderKeyWrapProtocolInput, opts ...grpc.CallOption) (*KeyProviderKeyWrapProtocolOutput, error) {
	out := new(KeyProviderKeyWrapProtocolOutput)
	err := c.cc.Invoke(ctx, "/keyprovider.KeyProviderService/WrapKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyProviderServiceClient) UnWrapKey(ctx context.Context, in *KeyProviderKeyWrapProtocolInput, opts ...grpc.CallOption) (*KeyProviderKeyWrapProtocolOutput, error) {
	out := new(KeyProviderKeyWrapProtocolOutput)
	err := c.cc.Invoke(ctx, "/keyprovider.KeyProviderService/UnWrapKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyProviderServiceClient) GetReport(ctx context.Context, in *KeyProviderGetReportInput, opts ...grpc.CallOption) (*KeyProviderGetReportOutput, error) {
	out := new(KeyProviderGetReportOutput)
	err := c.cc.Invoke(ctx, "/keyprovider.KeyProviderService/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyProviderServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/keyprovider.KeyProviderService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyProviderServiceServer is the server API for KeyProviderService service.
// All implementations must embed UnimplementedKeyProviderServiceServer
// for forward compatibility
type KeyProviderServiceServer interface {
	WrapKey(context.Context, *KeyProviderKeyWrapProtocolInput) (*KeyProviderKeyWrapProtocolOutput, error)
	UnWrapKey(context.Context, *KeyProviderKeyWrapProtocolInput) (*KeyProviderKeyWrapProtocolOutput, error)
	GetReport(context.Context, *KeyProviderGetReportInput) (*KeyProviderGetReportOutput, error)
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedKeyProviderServiceServer()
}

// UnimplementedKeyProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyProviderServiceServer struct {
}

func (UnimplementedKeyProviderServiceServer) WrapKey(context.Context, *KeyProviderKeyWrapProtocolInput) (*KeyProviderKeyWrapProtocolOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapKey not implemented")
}
func (UnimplementedKeyProviderServiceServer) UnWrapKey(context.Context, *KeyProviderKeyWrapProtocolInput) (*KeyProviderKeyWrapProtocolOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnWrapKey not implemented")
}
func (UnimplementedKeyProviderServiceServer) GetReport(context.Context, *KeyProviderGetReportInput) (*KeyProviderGetReportOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedKeyProviderServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedKeyProviderServiceServer) mustEmbedUnimplementedKeyProviderServiceServer() {}

// UnsafeKeyProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyProviderServiceServer will
// result in compilation errors.
type UnsafeKeyProviderServiceServer interface {
	mustEmbedUnimplementedKeyProviderServiceServer()
}

func RegisterKeyProviderServiceServer(s grpc.ServiceRegistrar, srv KeyProviderServiceServer) {
	s.RegisterService(&KeyProviderService_ServiceDesc, srv)
}

func _KeyProviderService_WrapKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyProviderKeyWrapProtocolInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyProviderServiceServer).WrapKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyprovider.KeyProviderService/WrapKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyProviderServiceServer).WrapKey(ctx, req.(*KeyProviderKeyWrapProtocolInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyProviderService_UnWrapKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyProviderKeyWrapProtocolInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyProviderServiceServer).UnWrapKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyprovider.KeyProviderService/UnWrapKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyProviderServiceServer).UnWrapKey(ctx, req.(*KeyProviderKeyWrapProtocolInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyProviderService_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyProviderGetReportInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyProviderServiceServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyprovider.KeyProviderService/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyProviderServiceServer).GetReport(ctx, req.(*KeyProviderGetReportInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyProviderService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyProviderServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyprovider.KeyProviderService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyProviderServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyProviderService_ServiceDesc is the grpc.ServiceDesc for KeyProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keyprovider.KeyProviderService",
	HandlerType: (*KeyProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WrapKey",
			Handler:    _KeyProviderService_WrapKey_Handler,
		},
		{
			MethodName: "UnWrapKey",
			Handler:    _KeyProviderService_UnWrapKey_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _KeyProviderService_GetReport_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _KeyProviderService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyprovider.proto",
}
