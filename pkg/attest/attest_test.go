// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package attest

import (
	_ "embed"
	"testing"

	"crypto/rand"
	"crypto/rsa"
	"encoding/base64"
	"encoding/hex"
	"fmt"

	"github.com/Microsoft/confidential-sidecar-containers/pkg/common"
	"github.com/pkg/errors"
)

/*
	data/ contains data logged from an instance running in production Azure instance, talking to a preprod MAA
	      thus all the certs, report etc are genuine.
*/

//go:embed test_data/uvm_security_policy.base64
var uvm_security_policy_base64 string

var uvm_security_policy_bin []byte

//go:embed test_data/body.uvm_reference_info.bin
var uvm_reference_info_bin []byte // generated by the query version

//go:embed test_data/uvm_host_amd_certificate.pem
var amd_certificate_pem string

//go:embed test_data/snp_report.bin
var snp_report_bin []byte

// the json to be passed as runtime claims.
var runtimedata_json_base64 string = "ewogICAiYWtleSIgOiAiYXZhbHVlIgp9Cg=="

// as a string presented through the api
var runtimedata_json_bin []byte

func Test_MAA(t *testing.T) {
	TestKeyBlobBytes, err := common.GenerateJWKSetFromPEM("-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAv965SRmyp8zbG5eNFuDCmmiSeaHpujG2bC/keLSuzvDMLO1W\nyrUJveaa5bzMoO0pA46pXkmbqHisozVzpiNDLCo6d3z4TrGMeFPf2APIMu+RSrzN\n56qvHVyIr5caWfHWk+FMRDwAefyNYRHkdYYkgmFK44hhUdtlCAKEv5UQpFZjvh4i\nI9jVBdGYMyBaKQLhjI5WIh+QG6Za5sSuOCFMnmuyuvN5DflpLFz595Ss+EoBIY+N\nil6lCtvcGgR+IbjUYHAOs5ajamTzgeO8kx3VCE9HcyKmyUZsiyiF6IDRp2Bpy3NH\nTjIz7tmkpTHx7tHnRtlfE2FUv0B6i/QYl/ZA5QIDAQABAoIBAG9Ig9jFIdy3MWII\nfVmGlPgvrL0FTuWiTbbj9DSaP0VhXlq0cYFyjSrqZG7ZGSpBQ2d/x/Ya5UBKdX7X\n0rLKgvxLpcuF3RLvYZSsuQi18NiyIGfjp901Hwn9kH2fOzZt0NHGe5Cb6H7YHzvs\nv7/2RJimS2Q6xo9Om4OQymO/1n4pZ+ZMiTy56AvIYZ/ToD8lorlzkGFNQsljmTSC\nIHEqRuyttI0Tf64jNaD8K74EThlZG8AE/yNG2FiRtN37+gAgMhxNWoF64s+9D/G0\n1xL96WNP5GmxXidK4BAUwWZmLJTtgUDcGjJbmfSuEMFjpRA9wfcL717jDzB0AImO\nOnZSgWECgYEA2swHf+pU8D1vshCBCTx/wGeIMRJE1Nw3YBhvPrUCExMo8M2UAkzs\nlKq61xSnh0X7f/Ma28vj9/gT+AHOnoCSdFSFO3dxX8B3y+B3jVvbxx7P+iZrM8J+\nVgrqPaXrIpBNPCooieD6O9EGvyC0+somgvtkA3ne2jdxX1rbPaQZr5kCgYEA4H6Y\ndWb2F5Dglhby9oXfjaLslIumoTTRFTgygIXHBG0auwMQzwfhuLyzH55mBICn16Ez\nLRyqssna5NgfTF0XrZT/BIPo8dSj0hlWvDtvCnZbDMTLYrk+GdypJD2oWmsbB6gB\nFjdjU4pv8c/4WjGuuWJ8Vs47+HTBNJlJlr6fWy0CgYBapPJqdRtxWBKBM8Mxn2XR\nwVKz+byYbw9l+VmFIhpU6rgoYxLxjQrqYHz9hCoPqdeS35V9/89XOOiU87K1CdEi\n7q0vwMEwiR1YUotU/fxkVwiUuvvouqf6X5VBqw5qCFxnE5Qt4w3oYCWqYxN3Xu5r\nj1iU9BV2VEfc2FhCBk056QKBgQDChm/tKy6K9QrmgzQ80XwI6ug9P1U/0thpnqyE\nGWd+OlwzOFDUVGwO+9PqzgJwXFsTyabirDhte+Ok8HEOZowh6T2g1/x9sFfTsgkq\nSgXJ9wymX9As138sQbx+nr7GupBNbhKjAZObzBV8X01AOlTAZsp/HW1xuRnBTiIp\n8Tt8cQKBgQDUv6Jpe1/kO0YJ6KlqVcMIZa+aQFamoMavlCNxxBvjoPnVdWB9PtWi\narzVMyAVvTjnT1QvGPJj1dffE+GSrAf3mssdp/tGfMGcgSB0DRcE1jz/JlzEc81F\no9Ki1lCw8ljoaNfJ8K+7wdiQ1V/H+rgL691P/2ZGc4vdOXJvy/hGZA==\n-----END RSA PRIVATE KEY-----")
	if err != nil {
		t.Fatal("generating key blob failed")
	}

	TestSNPPolicyBlobBytes, err := base64.StdEncoding.DecodeString(uvm_security_policy_base64)
	if err != nil {
		t.Fatal("decoding policy base64 failed")
	}

	// generate a different rsa key pair
	privateWrappingKey, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		t.Fatal("tampered rsa key pair generation failed")
	}

	TestKeyBlobBytesTampered, err := common.GenerateJWKSet(privateWrappingKey)
	if err != nil {
		t.Fatal("generating tampered key blob failed")
	}

	// Use a non-matching policy
	TestSNPPolicyBlobBytesTampered, err := base64.StdEncoding.DecodeString("ewoJImFsbG93X2FsbCI6IGZhbHNlLAoJImNvbnRhaW5lcnMiOiB7CgkJIm51bSI6IDIsCgkJInBhdXNlIjogewoJCQkiY29tbWFuZCI6ICIvcGF1c2UiLAoJCQkibGF5ZXJzIjogewoJCQkJIm51bSI6IDEsCgkJCQkibDAiOiAiMTZiNTE0MDU3YTA2YWQ2NjVmOTJjMDI4NjNhY2EwNzRmZDU5NzZjNzU1ZDI2YmZmMTYzNjUyOTkxNjllODQxNSIKCQkJfQoJCX0sCgkJImMwIjogewoJCQkiY29tbWFuZCI6ICJydXN0YyAtLWhlbHAiLAoJCQkibGF5ZXJzIjogewoJCQkJIm51bSI6IDYsCgkJCQkibDAiOiAiZmU4NGM5ZDViZmRkZDA3YTI2MjRkMDAzMzNjZjEzYzFhOWM5NDFmM2EyNjFmMTNlYWQ0NGZjNmE5M2JjMGU3YSIsCgkJCQkibDEiOiAiNGRlZGFlNDI4NDdjNzA0ZGE4OTFhMjhjMjVkMzIyMDFhMWFlNDQwYmNlMmFlY2NjZmE4ZTZmMDNiOTdhNmE2YyIsCgkJCQkibDIiOiAiNDFkNjRjZGViMzQ3YmYyMzZiNGMxM2I3NDAzYjYzM2ZmMTFmMWNmOTRkYmM3Y2Y4ODFhNDRkNmRhODhjNTE1NiIsCgkJCQkibDMiOiAiZWIzNjkyMWUxZjgyYWY0NmRmZTI0OGVmOGYxYjNhZmI2YTUyMzBhNjQxODFkOTYwZDEwMjM3YTA4Y2Q3M2M3OSIsCgkJCQkibDQiOiAiZTc2OWQ3NDg3Y2MzMTRkM2VlNzQ4YTQ0NDA4MDUzMTdjMTkyNjJjN2FjZDJmZGJkYjBkNDdkMmU0NjEzYTE1YyIsCgkJCQkibDUiOiAiMWI4MGYxMjBkYmQ4OGU0MzU1ZDYyNDFiNTE5YzNlMjUyOTAyMTVjNDY5NTE2YjQ5ZGVjZTljZjA3MTc1YTc2NiIKCQkJfQoJCX0KCX0sCgkic2VydmljZXMiOiB7CgkJImNlcnRjYWNoZSI6IHsKCQkJImVuZHBvaW50IjogImFtZXJpY2FzLnRlc3QuYWNjY2FjaGUuYXp1cmUubmV0IiwKCQkJInRlZV90eXBlIjogIlNldlNucFZNIiwKCQkJImFwaV92ZXJzaW9uIjogImFwaS12ZXJzaW9uPTIwMjAtMTAtMTUtcHJldmlldyIKCQl9LAoJCSJtYWEiOiB7IAoJCQkiZW5kcG9pbnQiOiAic2hhcmVkbmV1Lm5ldS5hdHRlc3QuYXp1cmUubmV0IiwKCQkJInRlZV90eXBlIjogIlNldlNucFZNIiwKCQkJImFwaV92ZXJzaW9uIjogImFwaS12ZXJzaW9uPTIwMjAtMTAtMDEiCgkJfSwgCgkJIm1oc20iOiBbIHsgCQoJCQkiZW5kcG9pbnQiOiAic3ZvbG9zLWhzbS5tYW5hZ2VkaHNtLmF6dXJlLm5ldCIsCgkJCSJhcGlfdmVyc2lvbiI6ICJhcGktdmVyc2lvbj03LjMtcHJldmlldyIsCgkJCSJraWQiOiBbCgkJCQkiTXlSdXN0Y0tleSIKCQkJXQoJCX0gXQkKCX0KfQ==")
	if err != nil {
		t.Fatal("decoding tampered policy base64 failed")
	}

	TestSNPReportBytes := snp_report_bin
	var TestSNPReport SNPAttestationReport
	if err := TestSNPReport.DeserializeReport(TestSNPReportBytes); err != nil {
		t.Fatalf("failed to deserialize attestation report")
	}

	ProductionTestSNPReportBytes := snp_report_bin
	var ProductionTestSNPReport SNPAttestationReport
	if err := ProductionTestSNPReport.DeserializeReport(ProductionTestSNPReportBytes); err != nil {
		t.Fatalf("failed to deserialize attestation report")
	}

	ValidMAAEndpoint := "sharedeus2.eus2.test.attest.azure.net"
	ValidTEEType := "SevSnpVM"
	ValidMAAAPIVersion := "api-version=2020-10-01"

	certFetcher := CertFetcher{
		EndpointType: "AzCache",
		Endpoint:     "americas.test.acccache.azure.net",
		TEEType:      "SevSnpVM",
		APIVersion:   "api-version=2020-10-15-preview",
	}

	ValidCertChain, _, err := certFetcher.GetCertChain(TestSNPReport.ChipID, TestSNPReport.PlatformVersion)
	if err != nil {
		t.Fatalf("retrieving cert chain failed")
	}

	ProductionCertCache := CertFetcher{
		EndpointType: "AzCache",
		Endpoint:     "americas.acccache.azure.net",
		TEEType:      "SevSnpVM",
		APIVersion:   "api-version=2020-10-15-preview",
	}

	ProductionValidCertChain, _, err := ProductionCertCache.GetCertChain(ProductionTestSNPReport.ChipID, ProductionTestSNPReport.PlatformVersion)
	if err != nil {
		t.Fatalf("retrieving cert chain failed")
	}

	ProductionTestKeyBlobBytes, err := base64.StdEncoding.DecodeString(
		"eyJrZXlzIjpbeyJlIjoiQVFBQiIsImtleV9vcHMiOlsiZW5jcnlwdCJdLCJraWQiOiJOdmhmdXEyY0NJT0FCOFhSNFhpOVByME5QXzlDZU16V1FHdFdfSEFMel93Iiwia3R5IjoiUlNBIiwibiI6InY5NjVTUm15cDh6Ykc1ZU5GdURDbW1pU2VhSHB1akcyYkNfa2VMU3V6dkRNTE8xV3lyVUp2ZWFhNWJ6TW9PMHBBNDZwWGttYnFIaXNvelZ6cGlORExDbzZkM3o0VHJHTWVGUGYyQVBJTXUtUlNyek41NnF2SFZ5SXI1Y2FXZkhXay1GTVJEd0FlZnlOWVJIa2RZWWtnbUZLNDRoaFVkdGxDQUtFdjVVUXBGWmp2aDRpSTlqVkJkR1lNeUJhS1FMaGpJNVdJaC1RRzZaYTVzU3VPQ0ZNbm11eXV2TjVEZmxwTEZ6NTk1U3MtRW9CSVktTmlsNmxDdHZjR2dSLUlialVZSEFPczVhamFtVHpnZU84a3gzVkNFOUhjeUtteVVac2l5aUY2SURScDJCcHkzTkhUakl6N3Rta3BUSHg3dEhuUnRsZkUyRlV2MEI2aV9RWWxfWkE1USJ9XX0=")

	if err != nil {
		t.Fatal("decoding policy base64 failed")
	}

	ProductionTestSNPPolicyBlobBytes, err := base64.StdEncoding.DecodeString(uvm_security_policy_base64)

	if err != nil {
		t.Fatal("decoding policy base64 failed")
	}

	InvalidCertChain := make([]byte, len(ValidCertChain))
	copy(InvalidCertChain, ValidCertChain)
	// modify one byte
	InvalidCertChain[len(InvalidCertChain)/2] = 0x00

	CorruptedProductionSNPReportBytes, _ := hex.DecodeString("00000000020000001f0003000000000001000000000000000000000000000000020000000000000000000000000000000000000001000000020000000000065d010000000000000000000000000000007ab000a323b3c873f5b81bbe584e7c1a26bcf40dc27e00f8e0d144b1ed2d14f10000000000000000000000000000000000000000000000000000000000000000deac3d39f12ba5f45e4bdd7a3686134c0b7b6883381210a87d6b8015e60a6bad5b264d5c2725e6b6ef8b9e3f376160b4dff51dbeac6096960223d54e5bee6a7df6a131c109b34d8043da5874d56bb78d70eed5b3693ebb29d964f7ae295f49cb0554b4cc33ced533c7a6f9aeb4c563c68bece465756389dfa5f527bcb65c74ea0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e29a02183df412e5c69c3d7b0beedfc8eff96bc16c0020b1cd06d9718ae37d9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff020000000000065d0000000000000000000000000000000000000000000000005c6095e0748b55eaca503f2a020ade6a9151d6a62a292c6c7af3c935e3a3f8f401770cd189b7f666141930e3461573301a635e7fb0898de062241ea0da9a85d3020000000000065d0133010001330100020000000000065d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008961c43fca3e22bb3e4ecd99e70bc1027fe43b32cc955077528c02249de74e1ececc6bbb91a6e2899fec6c54fab5653700000000000000000000000000000000000000000000000089c9797445d305380c5595ccc2f4e61b2c1fe5596b9ed5dc842c3d0dece0bf9aab9fc0d7c34e1315d5e143bb374303a

	CorruptedProductionSigSNPReportBytes, _ := hex.DecodeString("02000000020000001f0003000000000001000000000000000000000000000000020000000000000000000000000000000000000001000000020000000000065d010000000000000000000000000000007ab000a323b3c873f5b81bbe584e7c1a26bcf40dc27e00f8e0d144b1ed2d14f10000000000000000000000000000000000000000000000000000000000000000deac3d39f12ba5f45e4bdd7a3686134c0b7b6883381210a87d6b8015e60a6bad5b264d5c2725e6b6ef8b9e3f376160b4dff51dbeac6096960223d54e5bee6a7df6a131c109b34d8043da5874d56bb78d70eed5b3693ebb29d964f7ae295f49cb0554b4cc33ced533c7a6f9aeb4c563c68bece465756389dfa5f527bcb65c74ea0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e29a02183df412e5c69c3d7b0beedfc8eff96bc16c0020b1cd06d9718ae37d9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff020000000000065d0000000000000000000000000000000000000000000000005c6095e0748b55eaca503f2a020ade6a9151d6a62a292c6c7af3c935e3a3f8f401770cd189b7f666141930e3461573301a635e7fb0898de062241ea0da9a85d3020000000000065d0133010001330100020000000000065d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008961c43fca3e22bb3e4ecd99e70bc1027fe43b32cc955077528c02249de74e1ececc6bbb91a6e2899fec6c54fab5653700000000000000000000000000000000000000000000000089c9797445d305380c5595ccc2f4e61b2c1fe5596b9ed5dc842c3d0dece0bf9aab9fc0d7c34e1315d5e143bb

	type testcase struct {
		name string

		maa common.MAA

		snpAttestationReport []byte
		vcekCertChain        []byte
		policyBlob           []byte
		keyBlob              []byte
		uvmReferenceInfo     []byte

		expectedError error
		expectErr     bool
	}

	testcases := []*testcase{
		// MAA_Success passes testing if the error is nil

		{
			name: "MAA_Success_Production",

			maa: common.MAA{
				Endpoint:   ValidMAAEndpoint,
				TEEType:    ValidTEEType,
				APIVersion: ValidMAAAPIVersion,
			},

			snpAttestationReport: snp_report_bin,
			vcekCertChain:        []byte(amd_certificate_pem),
			policyBlob:           uvm_security_policy_bin,
			keyBlob:              runtimedata_json_bin,
			uvmReferenceInfo:     uvm_reference_info_bin,

			expectedError: nil,
			expectErr:     false,
		},
		// MAA_InvalidCertChain testing passes if the MAA responds with Bad Request
		{
			name: "MAA_InvalidCertChain",

			maa: common.MAA{
				Endpoint:   ValidMAAEndpoint,
				TEEType:    ValidTEEType,
				APIVersion: ValidMAAAPIVersion,
			},

			snpAttestationReport: TestSNPReportBytes,
			vcekCertChain:        InvalidCertChain,
			policyBlob:           TestSNPPolicyBlobBytes,
			keyBlob:              TestKeyBlobBytes,
			uvmReferenceInfo:     uvm_reference_info_bin,

			expectedError: errors.New("pulling maa post response failed: http response status equal to 400 Bad Request"),
			expectErr:     true,
		},
		// MAA_InvalidKeyBlob testing passes if the MAA responds with Bad Request as the key blob does not match the one in the attestation report
		{
			name: "MAA_InvalidKeyBlob",

			maa: common.MAA{
				Endpoint:   ValidMAAEndpoint,
				TEEType:    ValidTEEType,
				APIVersion: ValidMAAAPIVersion,
			},

			snpAttestationReport: TestSNPReportBytes,
			vcekCertChain:        ValidCertChain,
			policyBlob:           TestSNPPolicyBlobBytes,
			keyBlob:              make([]byte, 4),
			uvmReferenceInfo:     uvm_reference_info_bin,

			expectedError: errors.New("pulling maa post response failed: http response status equal to 400 Bad Request"),
			expectErr:     true,
		},
		// MAA_TamperedKeyBlob testing passes if the MAA responds with Bad Request as the key blob does not match the one in the attestation report
		{
			name: "MAA_TamperedKeyBlob",

			maa: common.MAA{
				Endpoint:   ValidMAAEndpoint,
				TEEType:    ValidTEEType,
				APIVersion: ValidMAAAPIVersion,
			},

			snpAttestationReport: TestSNPReportBytes,
			vcekCertChain:        ValidCertChain,
			policyBlob:           TestSNPPolicyBlobBytes,
			keyBlob:              TestKeyBlobBytesTampered,
			uvmReferenceInfo:     uvm_reference_info_bin,

			expectedError: errors.New("pulling maa post response failed: http response status equal to 400 Bad Request"),
			expectErr:     true,
		},
		// MAA_InvalidPolicyBlob testing passes if the MAA responds with Bad Request as the policy does not match the one in the attestation report
		{
			name: "MAA_InvalidPolicyBlob",

			maa: common.MAA{
				Endpoint:   ValidMAAEndpoint,
				TEEType:    ValidTEEType,
				APIVersion: ValidMAAAPIVersion,
			},

			snpAttestationReport: TestSNPReportBytes,
			vcekCertChain:        ValidCertChain,
			policyBlob:           make([]byte, 4),
			keyBlob:              TestKeyBlobBytes,
			uvmReferenceInfo:     uvm_reference_info_bin,

			expectedError: errors.New("pulling maa post response failed: http response status equal to 400 Bad Request"),
			expectErr:     true,
		},

		// MAA_TamperedPolicyBlob testing passes if the MAA responds with Bad Request as the policy does not match the one in the attestation report
		{
			name: "MAA_TamperedPolicyBlob",

			maa: common.MAA{
				Endpoint:   ValidMAAEndpoint,
				TEEType:    ValidTEEType,
				APIVersion: ValidMAAAPIVersion,
			},

			snpAttestationReport: TestSNPReportBytes,
			vcekCertChain:        ValidCertChain,
			policyBlob:           TestSNPPolicyBlobBytesTampered,
			keyBlob:              TestKeyBlobBytes,
			uvmReferenceInfo:     uvm_reference_info_bin,

			expectedError: errors.New("pulling maa post response failed: http response status equal to 400 Bad Request"),
			expectErr:     true,
		},
		{
			name: "MAA_CorruptedSNPReport",

			maa: common.MAA{
				Endpoint:   ValidMAAEndpoint,
				TEEType:    ValidTEEType,
				APIVersion: ValidMAAAPIVersion,
			},

			snpAttestationReport: CorruptedProductionSNPReportBytes,
			vcekCertChain:        ProductionValidCertChain,
			policyBlob:           ProductionTestSNPPolicyBlobBytes,
			keyBlob:              ProductionTestKeyBlobBytes,
			uvmReferenceInfo:     uvm_reference_info_bin,

			expectedError: errors.New("pulling maa post response failed: http response status equal to 400 Bad Request"),
			expectErr:     true,
		},
		{
			name: "MAA_CorruptedSigSNPReport",

			maa: common.MAA{
				Endpoint:   ValidMAAEndpoint,
				TEEType:    ValidTEEType,
				APIVersion: ValidMAAAPIVersion,
			},

			snpAttestationReport: CorruptedProductionSigSNPReportBytes,
			vcekCertChain:        ProductionValidCertChain,
			policyBlob:           ProductionTestSNPPolicyBlobBytes,
			keyBlob:              ProductionTestKeyBlobBytes,
			uvmReferenceInfo:     uvm_reference_info_bin,

			expectedError: errors.New("pulling maa post response failed: http response status equal to 400 Bad Request"),
			expectErr:     true,
		},
		{
			name: "MAA_NotMatchingCertChain",

			maa: common.MAA{
				Endpoint:   ValidMAAEndpoint,
				TEEType:    ValidTEEType,
				APIVersion: ValidMAAAPIVersion,
			},

			snpAttestationReport: ProductionTestSNPReportBytes,
			vcekCertChain:        ValidCertChain,
			policyBlob:           ProductionTestSNPPolicyBlobBytes,
			keyBlob:              ProductionTestKeyBlobBytes,
			uvmReferenceInfo:     uvm_reference_info_bin,

			expectedError: errors.New("pulling maa post response failed: http response status equal to 400 Bad Request"),
			expectErr:     true,
		},
	}

	uvm_security_policy_bin, _ = base64.StdEncoding.DecodeString(uvm_security_policy_base64)
	runtimedata_json_bin, _ = base64.StdEncoding.DecodeString(runtimedata_json_base64)

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			resp, err := tc.maa.Attest(tc.snpAttestationReport, tc.vcekCertChain, tc.policyBlob, tc.keyBlob, tc.uvmReferenceInfo)

			if tc.expectErr && err == nil {
				fmt.Printf("token: %v\n", resp)
				t.Fatal("expected err got nil")
			} else if tc.expectErr && err.Error() != tc.expectedError.Error() {
				t.Fatalf("expected %q got %q", tc.expectedError.Error(), err.Error())
			} else if !tc.expectErr && err != nil {
				t.Fatalf("did not expect err got %q", err.Error())
			}
		})
	}
}
